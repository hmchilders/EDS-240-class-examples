---
title: "{ggplot2} Review [Lecture 1]"
author: "Heather Childers"
format: html
editor: visual
editor_options: 
  chunk_output_type: inline
---

# {ggplot2} Review

```{r}
library(tidyverse)
library(palmerpenguins)
```

## TidyData

Take this [tibble](https://tibble.tidyverse.org/) (a lazy / surly `data.frame`) of temperature recordings at three stations on three dates:

```{r}
# untidy data ----
temp_data_wide <- tribble(
  ~date, ~station1, ~station2,  ~station3,
  "2023-10-01", 30.1, 29.8,  31.2,
  "2023-11-01", 28.6, 29.1,  33.4,
  "2023-12-01", 29.9, 28.5,  32.3
)
```

Make the data clean!

```{r}
# make tidy ----
temp_data_long <- temp_data_wide |> 
  pivot_longer(cols = starts_with("station"),
               names_to = "station_id", 
               values_to = "temp_c")
```

# Example #1: 

Exploring the relationship between penguin **bill length** and **bill depth**

```{r}
#Initialize a plot object
ggplot(data = penguins, 
       #Add in mapping aesthetics
       aes(x = bill_length_mm, y = bill_depth_mm))+
  #Define a geometry to represent your data
  geom_point()
```

If we\'d like to represent species using another aesthetic (e.g. color, shape, size), we need to modify our plot\'s aesthetic (i.e. inside `aes()`) -- **any time we want to modify the appearance of our plotted data based on a variable in our dataset, we do so within `aes()`.** This process is known as **scaling**. A legend will automatically be added to indicate which values (in this case, colors) correspond to which level of our variable (in this case, species):

```{r}
#Initialize a plot object
ggplot(data = penguins, 
       #Add in mapping aesthetics
       aes(x = bill_length_mm, y = bill_depth_mm))+
  #Define a geometry to represent your data
  geom_point(aes(color = species)) #change the color of the data point based on species
```

#### Global vs Local Mapping

**Global** mappings are passed down to each subsequent geom layer. Therefore, the `color = species` mapping is also passed to `geom_smooth()`, resulting in a best fit line for each species.

```{r}
#Initialize a plot object
ggplot(data = penguins, 
       #Add in mapping aesthetics
       aes(x = bill_length_mm, y = bill_depth_mm, color = species))+
  #Define a geometry to represent your data
  geom_point()+
  #Add in the line of best fit using geom_smooth
  geom_smooth(method = 'lm')
```

**Local** mappings (e.g. within `geom_point()`) only apply to that particular layer. Therefore, the `color = species` mapping is *only* applied to `geom_point()`, and `geom_smooth()` fits a best fit line to the entire data set.

The `na.omit` function omits the NA values so I don't get a warning message that it removed NA values for me.

```{r}
#Initialize a plot object
ggplot(data = na.omit(penguins), 
       #Add in mapping aesthetics
       aes(x = bill_length_mm, y = bill_depth_mm))+
  #Define a geometry to represent your data
  geom_point(aes(color = species))+ #change color of the data point by species
  #add in the line of best fit
  geom_smooth(method = "lm")

```

#### Mapping with Colors!

Do so within the corresponding `geom_*()` and outside of the `aes()` function! **Color is no longer being mapped to a variable.**

```{r}
#Initialize a plot object
ggplot(data = na.omit(penguins), 
       #Add in mapping aesthetics
       aes(x = bill_length_mm, y = bill_depth_mm))+
  #Define a geometry to represent your data
  geom_point(color = 'pink')
```

Here, we use `scale_color_manual()` to update the colors of our data points. Colors will be mapped from the levels in our data (i.e. `Adelie`, `Chinstrap`, `Gentoo`) to the order of the aethetic values supplied (`"#FF8302"`, `"#C35CCA"`, `"#067575"`):

```{r}
#Initialize a plot object
ggplot(data = na.omit(penguins), 
       #Add in mapping aesthetics
       aes(x = bill_length_mm, y = bill_depth_mm, color = species))+
  #Define a geometry to represent your data
  geom_point() +
  #Create our own color scheme
  scale_color_manual(values = c("#FF8302", "#C35CCA", "#067575"))
```

In the previous example, we mapped color to a **categorical** variable (`species`). We can also map color to **continuous** variables (e.g. `body_mass_g`):

```{r}
#Initialize a plot object
ggplot(data = na.omit(penguins), 
       #Add in mapping aesthetics
       aes(x = bill_length_mm, y = bill_depth_mm, color = body_mass_g))+
  #Define a geometry to represent your data
  geom_point() +
  #Create a gradient color scheme for continuous data
  scale_color_gradient(low = "#132B43", high = "#F7DD4C")
```

# Example #2 :

explore **penguin species counts**

```{r}
#Initialize plot // add mapping aesthetics
ggplot(data = penguins, aes(x = species))+
  #Create a bar graph
  geom_bar()
```

#### Overriding geom_bar's default stat

```{r}
penguin_summary <- penguins |> 
  count(species) # calculate number of observations (rows) for each species

ggplot(penguin_summary, aes(x = species, y = n)) + 
  geom_bar(stat = "identity")
```

Now let\'s say we\'d like to display the same bar chart with y-axis values as proportions, rather than counts. We can override the default mapping from transformed variables to aesthetics by doing the following:

```{r}
library(palmerpenguins)
library(tidyverse)

ggplot(penguins, aes(x = species, y = after_stat(prop), group = 1)) +
  geom_bar()
```

#### Using the `stat_summary()` function:

-   plot the min, mean, and max values of penguin `body_mass_g` by species

```{r}
ggplot(penguins) +
  stat_summary(
    aes(x = species, y = body_mass_g, color = species),
    fun.max = max, 
    fun.min = min,
    fun = mean
  )+
  scale_color_manual(values = c("#FF8302", "#C35CCA", "#067575"))
```

#### Position Adjustments

Position adjustments apply minor tweaks to the position of elements to resolve overlapping geoms. For example, let\'s say we would like to visualize penguin counts by species (bar height) and by island (color) using our bar chart from earlier. We could add the `fill` aesthetic:

```{r}
ggplot(penguins, aes(x = species, fill = island)) +
  geom_bar(position = 'stack')
```

The geom_bar function has a "position" argument that you can set to alter the position of your filled values. The abpve example uses 'stack which is the default setting for the argument, the following examples show ways you can change the data viz:

```{r}
ggplot(penguins, aes(x = species, fill = island)) +
  geom_bar(position = "fill")
```

```{r}
ggplot(penguins, aes(x = species, fill = island)) +
  geom_bar(position = "dodge")
```

Instead of `position = "X"`, you can use [functions](https://ggplot2.tidyverse.org/reference/#position-adjustment) to update and further adjust your geom\'s positions. Here, we\'ll use `position_dodge2()` to also ensure the widths of each of our bars are equal:

```{r}
ggplot(penguins, aes(x = species, fill = island)) +
  geom_bar(position = position_dodge2(preserve = "single"))
```

Coordinate Systems:

```{r}
ggplot(penguins, aes(x = species)) +
  geom_bar() +
  coord_cartesian()
```

```{r}
ggplot(penguins, aes(x = species)) +
  geom_bar() + 
  coord_flip()
```

```{r}
ggplot(penguins, aes(x = species, fill = species)) +
  geom_bar() + 
  coord_polar() +
  scale_fill_manual(values = c("#FF8302", "#C35CCA", "#067575"))
```

#### Changing the theme of a graph

```{r}
ggplot(penguins, aes(x = species, fill = species)) +
  geom_bar() + 
  coord_polar() +
  scale_fill_manual(values = c("#FF8302", "#C35CCA", "#067575"))+
  theme_classic()
```

```{r}
ggplot(penguins, aes(x = species, fill = species)) +
  geom_bar() + 
  coord_polar() +
  scale_fill_manual(values = c("#FF8302", "#C35CCA", "#067575"))+
  theme_light()
```

#### Further modify nearly any non-data element of your plot using `theme()`

```{r}
ggplot(penguins, aes(x = species, fill = species)) +
  geom_bar() + 
  coord_polar() +
  scale_fill_manual(values = c("#FF8302", "#C35CCA", "#067575"))+
  theme_light()+
  theme(
    axis.title = element_text(size = 17, color = "purple")
  )
```

# Example #3:

we\'ll explore **penguin flipper lengths**

We\'ll again start by initializing our plot object with data, mapping our aesthetics, and defining a geometric object. Note that the default statistical transformation for `geom_histogram()` is `stat = "bin"`:

```{r}
ggplot(penguins, aes(x = flipper_length_mm)) + 
  geom_histogram()
```

Just like in our scatterplot (Plot #1), we\'ll modify our plot\'s aesthetics (i.e. inside `aes()`) to color our histrogram bins according to the species variable. Unlike our scatterplot (which uses the `color` argument), we\'ll use the `fill` argument to *fill* the bars with color (rather than *outline* them with color). We\'ll also manually define our fill scale:

```{r}
ggplot(penguins, aes(x = flipper_length_mm, fill = species)) + 
  geom_histogram() +
  scale_fill_manual(values = c("#FF8302", "#C35CCA", "#067575"))
```

Let\'s update the position of our binned bars from `"stack"` to `"identity"` and also increase the transparency (using `alpha`) so that we can see overlapping bars:

```{r}
ggplot(penguins, aes(x = flipper_length_mm, fill = species)) + 
  geom_histogram(position = "identity", alpha = 0.5) +
  scale_fill_manual(values = c("#FF8302", "#C35CCA", "#067575"))
```
